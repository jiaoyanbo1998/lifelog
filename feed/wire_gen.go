// Code generated by Wire. DO NOT EDIT.

//go:generate go run -mod=mod github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package main

import (
	"github.com/google/wire"
	"lifelog-grpc/feed/event"
	"lifelog-grpc/feed/grpc"
	"lifelog-grpc/feed/ioc"
	"lifelog-grpc/feed/repository"
	"lifelog-grpc/feed/repository/dao"
	"lifelog-grpc/feed/service"
)

// Injectors from wire.go:

func InitFeedServiceGRPCService() *App {
	logger := ioc.InitLogger()
	db := ioc.GetMysql(logger)
	feedPullDAO := dao.NewFeedPullGormDAO(db)
	feedPushDAO := dao.NewFeedPushGormDAO(db)
	feedRepository := repository.NewFeedRepository(feedPullDAO, feedPushDAO)
	v := ioc.RegisterHandler(feedRepository)
	feedService := service.NewFeedService(feedRepository, v)
	feedServiceGRPCService := grpc.NewFeedServiceGRPCService(feedService)
	client := ioc.InitSaramaKafka(logger)
	feedEventAsyncConsumer := event.NewFeedEventAsyncConsumer(client, logger, feedService)
	app := &App{
		feedServiceGRPCService: feedServiceGRPCService,
		consumer:               feedEventAsyncConsumer,
	}
	return app
}

// wire.go:

var feedSet = wire.NewSet(service.NewFeedService, repository.NewFeedRepository, dao.NewFeedPullGormDAO, dao.NewFeedPushGormDAO)

var thirdSet = wire.NewSet(ioc.InitRedis, ioc.GetMysql, ioc.InitLogger, ioc.RegisterHandler, ioc.InitSaramaKafka)
