// 版本

// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             (unknown)
// source: api/proto/collect/v1/collect.proto

// 包名 collectv1

package collectv1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	CollectService_EditCollect_FullMethodName         = "/collect.v1.CollectService/EditCollect"
	CollectService_DeleteCollect_FullMethodName       = "/collect.v1.CollectService/DeleteCollect"
	CollectService_CollectList_FullMethodName         = "/collect.v1.CollectService/CollectList"
	CollectService_InsertCollectDetail_FullMethodName = "/collect.v1.CollectService/InsertCollectDetail"
	CollectService_CollectDetail_FullMethodName       = "/collect.v1.CollectService/CollectDetail"
)

// CollectServiceClient is the client API for CollectService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// 收藏夹服务
type CollectServiceClient interface {
	EditCollect(ctx context.Context, in *EditCollectRequest, opts ...grpc.CallOption) (*EditCollectResponse, error)
	DeleteCollect(ctx context.Context, in *DeleteCollectRequest, opts ...grpc.CallOption) (*DeleteCollectResponse, error)
	CollectList(ctx context.Context, in *CollectListRequest, opts ...grpc.CallOption) (*CollectListResponse, error)
	InsertCollectDetail(ctx context.Context, in *InsertCollectDetailRequest, opts ...grpc.CallOption) (*InsertCollectDetailResponse, error)
	CollectDetail(ctx context.Context, in *CollectDetailRequest, opts ...grpc.CallOption) (*CollectDetailResponse, error)
}

type collectServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewCollectServiceClient(cc grpc.ClientConnInterface) CollectServiceClient {
	return &collectServiceClient{cc}
}

func (c *collectServiceClient) EditCollect(ctx context.Context, in *EditCollectRequest, opts ...grpc.CallOption) (*EditCollectResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(EditCollectResponse)
	err := c.cc.Invoke(ctx, CollectService_EditCollect_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *collectServiceClient) DeleteCollect(ctx context.Context, in *DeleteCollectRequest, opts ...grpc.CallOption) (*DeleteCollectResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteCollectResponse)
	err := c.cc.Invoke(ctx, CollectService_DeleteCollect_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *collectServiceClient) CollectList(ctx context.Context, in *CollectListRequest, opts ...grpc.CallOption) (*CollectListResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CollectListResponse)
	err := c.cc.Invoke(ctx, CollectService_CollectList_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *collectServiceClient) InsertCollectDetail(ctx context.Context, in *InsertCollectDetailRequest, opts ...grpc.CallOption) (*InsertCollectDetailResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(InsertCollectDetailResponse)
	err := c.cc.Invoke(ctx, CollectService_InsertCollectDetail_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *collectServiceClient) CollectDetail(ctx context.Context, in *CollectDetailRequest, opts ...grpc.CallOption) (*CollectDetailResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CollectDetailResponse)
	err := c.cc.Invoke(ctx, CollectService_CollectDetail_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CollectServiceServer is the server API for CollectService service.
// All implementations must embed UnimplementedCollectServiceServer
// for forward compatibility.
//
// 收藏夹服务
type CollectServiceServer interface {
	EditCollect(context.Context, *EditCollectRequest) (*EditCollectResponse, error)
	DeleteCollect(context.Context, *DeleteCollectRequest) (*DeleteCollectResponse, error)
	CollectList(context.Context, *CollectListRequest) (*CollectListResponse, error)
	InsertCollectDetail(context.Context, *InsertCollectDetailRequest) (*InsertCollectDetailResponse, error)
	CollectDetail(context.Context, *CollectDetailRequest) (*CollectDetailResponse, error)
	mustEmbedUnimplementedCollectServiceServer()
}

// UnimplementedCollectServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedCollectServiceServer struct{}

func (UnimplementedCollectServiceServer) EditCollect(context.Context, *EditCollectRequest) (*EditCollectResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EditCollect not implemented")
}
func (UnimplementedCollectServiceServer) DeleteCollect(context.Context, *DeleteCollectRequest) (*DeleteCollectResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteCollect not implemented")
}
func (UnimplementedCollectServiceServer) CollectList(context.Context, *CollectListRequest) (*CollectListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CollectList not implemented")
}
func (UnimplementedCollectServiceServer) InsertCollectDetail(context.Context, *InsertCollectDetailRequest) (*InsertCollectDetailResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InsertCollectDetail not implemented")
}
func (UnimplementedCollectServiceServer) CollectDetail(context.Context, *CollectDetailRequest) (*CollectDetailResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CollectDetail not implemented")
}
func (UnimplementedCollectServiceServer) mustEmbedUnimplementedCollectServiceServer() {}
func (UnimplementedCollectServiceServer) testEmbeddedByValue()                        {}

// UnsafeCollectServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CollectServiceServer will
// result in compilation errors.
type UnsafeCollectServiceServer interface {
	mustEmbedUnimplementedCollectServiceServer()
}

func RegisterCollectServiceServer(s grpc.ServiceRegistrar, srv CollectServiceServer) {
	// If the following call pancis, it indicates UnimplementedCollectServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&CollectService_ServiceDesc, srv)
}

func _CollectService_EditCollect_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EditCollectRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CollectServiceServer).EditCollect(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CollectService_EditCollect_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CollectServiceServer).EditCollect(ctx, req.(*EditCollectRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CollectService_DeleteCollect_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteCollectRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CollectServiceServer).DeleteCollect(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CollectService_DeleteCollect_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CollectServiceServer).DeleteCollect(ctx, req.(*DeleteCollectRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CollectService_CollectList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CollectListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CollectServiceServer).CollectList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CollectService_CollectList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CollectServiceServer).CollectList(ctx, req.(*CollectListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CollectService_InsertCollectDetail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InsertCollectDetailRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CollectServiceServer).InsertCollectDetail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CollectService_InsertCollectDetail_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CollectServiceServer).InsertCollectDetail(ctx, req.(*InsertCollectDetailRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CollectService_CollectDetail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CollectDetailRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CollectServiceServer).CollectDetail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CollectService_CollectDetail_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CollectServiceServer).CollectDetail(ctx, req.(*CollectDetailRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// CollectService_ServiceDesc is the grpc.ServiceDesc for CollectService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var CollectService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "collect.v1.CollectService",
	HandlerType: (*CollectServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "EditCollect",
			Handler:    _CollectService_EditCollect_Handler,
		},
		{
			MethodName: "DeleteCollect",
			Handler:    _CollectService_DeleteCollect_Handler,
		},
		{
			MethodName: "CollectList",
			Handler:    _CollectService_CollectList_Handler,
		},
		{
			MethodName: "InsertCollectDetail",
			Handler:    _CollectService_InsertCollectDetail_Handler,
		},
		{
			MethodName: "CollectDetail",
			Handler:    _CollectService_CollectDetail_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/proto/collect/v1/collect.proto",
}
