// Code generated by MockGen. DO NOT EDIT.
// Source: ./user_grpc.pb.go
//
// Generated by this command:
//
//	mockgen -source=./user_grpc.pb.go -package=userGRPCMock -destination=mock/usergRPC.mock.go UserServiceClient
//

// Package userGRPCMock is a generated GoMock package.
package userGRPCMock

import (
	context "context"
	userv1 "lifelog-grpc/api/proto/gen/user/v1"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
	grpc "google.golang.org/grpc"
)

// MockUserServiceClient is a mock of UserServiceClient interface.
type MockUserServiceClient struct {
	ctrl     *gomock.Controller
	recorder *MockUserServiceClientMockRecorder
	isgomock struct{}
}

// MockUserServiceClientMockRecorder is the mock recorder for MockUserServiceClient.
type MockUserServiceClientMockRecorder struct {
	mock *MockUserServiceClient
}

// NewMockUserServiceClient creates a new mock instance.
func NewMockUserServiceClient(ctrl *gomock.Controller) *MockUserServiceClient {
	mock := &MockUserServiceClient{ctrl: ctrl}
	mock.recorder = &MockUserServiceClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUserServiceClient) EXPECT() *MockUserServiceClientMockRecorder {
	return m.recorder
}

// DeleteUserInfoByIds mocks base method.
func (m *MockUserServiceClient) DeleteUserInfoByIds(ctx context.Context, in *userv1.DeleteUserInfoByIdsRequest, opts ...grpc.CallOption) (*userv1.DeleteUserInfoByIdsResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteUserInfoByIds", varargs...)
	ret0, _ := ret[0].(*userv1.DeleteUserInfoByIdsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteUserInfoByIds indicates an expected call of DeleteUserInfoByIds.
func (mr *MockUserServiceClientMockRecorder) DeleteUserInfoByIds(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteUserInfoByIds", reflect.TypeOf((*MockUserServiceClient)(nil).DeleteUserInfoByIds), varargs...)
}

// GetUserInfoById mocks base method.
func (m *MockUserServiceClient) GetUserInfoById(ctx context.Context, in *userv1.GetUserInfoByIdRequest, opts ...grpc.CallOption) (*userv1.GetUserInfoByIdResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetUserInfoById", varargs...)
	ret0, _ := ret[0].(*userv1.GetUserInfoByIdResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserInfoById indicates an expected call of GetUserInfoById.
func (mr *MockUserServiceClientMockRecorder) GetUserInfoById(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserInfoById", reflect.TypeOf((*MockUserServiceClient)(nil).GetUserInfoById), varargs...)
}

// LoginByEmailAndPassword mocks base method.
func (m *MockUserServiceClient) LoginByEmailAndPassword(ctx context.Context, in *userv1.LoginByEmailAndPasswordRequest, opts ...grpc.CallOption) (*userv1.LoginByEmailAndPasswordResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "LoginByEmailAndPassword", varargs...)
	ret0, _ := ret[0].(*userv1.LoginByEmailAndPasswordResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// LoginByEmailAndPassword indicates an expected call of LoginByEmailAndPassword.
func (mr *MockUserServiceClientMockRecorder) LoginByEmailAndPassword(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LoginByEmailAndPassword", reflect.TypeOf((*MockUserServiceClient)(nil).LoginByEmailAndPassword), varargs...)
}

// LoginByPhoneCode mocks base method.
func (m *MockUserServiceClient) LoginByPhoneCode(ctx context.Context, in *userv1.LoginByPhoneCodeRequest, opts ...grpc.CallOption) (*userv1.LoginByPhoneCodeResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "LoginByPhoneCode", varargs...)
	ret0, _ := ret[0].(*userv1.LoginByPhoneCodeResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// LoginByPhoneCode indicates an expected call of LoginByPhoneCode.
func (mr *MockUserServiceClientMockRecorder) LoginByPhoneCode(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LoginByPhoneCode", reflect.TypeOf((*MockUserServiceClient)(nil).LoginByPhoneCode), varargs...)
}

// Logout mocks base method.
func (m *MockUserServiceClient) Logout(ctx context.Context, in *userv1.LogoutRequest, opts ...grpc.CallOption) (*userv1.LogoutResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Logout", varargs...)
	ret0, _ := ret[0].(*userv1.LogoutResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Logout indicates an expected call of Logout.
func (mr *MockUserServiceClientMockRecorder) Logout(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Logout", reflect.TypeOf((*MockUserServiceClient)(nil).Logout), varargs...)
}

// RegisterByEmailAndPassword mocks base method.
func (m *MockUserServiceClient) RegisterByEmailAndPassword(ctx context.Context, in *userv1.RegisterByEmailAndPasswordRequest, opts ...grpc.CallOption) (*userv1.RegisterByEmailAndPasswordResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "RegisterByEmailAndPassword", varargs...)
	ret0, _ := ret[0].(*userv1.RegisterByEmailAndPasswordResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RegisterByEmailAndPassword indicates an expected call of RegisterByEmailAndPassword.
func (mr *MockUserServiceClientMockRecorder) RegisterByEmailAndPassword(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RegisterByEmailAndPassword", reflect.TypeOf((*MockUserServiceClient)(nil).RegisterByEmailAndPassword), varargs...)
}

// UpdateAvatar mocks base method.
func (m *MockUserServiceClient) UpdateAvatar(ctx context.Context, in *userv1.UpdateAvatarRequest, opts ...grpc.CallOption) (*userv1.UpdateAvatarResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateAvatar", varargs...)
	ret0, _ := ret[0].(*userv1.UpdateAvatarResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateAvatar indicates an expected call of UpdateAvatar.
func (mr *MockUserServiceClientMockRecorder) UpdateAvatar(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateAvatar", reflect.TypeOf((*MockUserServiceClient)(nil).UpdateAvatar), varargs...)
}

// UpdateUserInfoById mocks base method.
func (m *MockUserServiceClient) UpdateUserInfoById(ctx context.Context, in *userv1.UpdateUserInfoByIdRequest, opts ...grpc.CallOption) (*userv1.UpdateUserInfoByIdResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateUserInfoById", varargs...)
	ret0, _ := ret[0].(*userv1.UpdateUserInfoByIdResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateUserInfoById indicates an expected call of UpdateUserInfoById.
func (mr *MockUserServiceClientMockRecorder) UpdateUserInfoById(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateUserInfoById", reflect.TypeOf((*MockUserServiceClient)(nil).UpdateUserInfoById), varargs...)
}

// MockUserServiceServer is a mock of UserServiceServer interface.
type MockUserServiceServer struct {
	ctrl     *gomock.Controller
	recorder *MockUserServiceServerMockRecorder
	isgomock struct{}
}

// MockUserServiceServerMockRecorder is the mock recorder for MockUserServiceServer.
type MockUserServiceServerMockRecorder struct {
	mock *MockUserServiceServer
}

// NewMockUserServiceServer creates a new mock instance.
func NewMockUserServiceServer(ctrl *gomock.Controller) *MockUserServiceServer {
	mock := &MockUserServiceServer{ctrl: ctrl}
	mock.recorder = &MockUserServiceServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUserServiceServer) EXPECT() *MockUserServiceServerMockRecorder {
	return m.recorder
}

// DeleteUserInfoByIds mocks base method.
func (m *MockUserServiceServer) DeleteUserInfoByIds(arg0 context.Context, arg1 *userv1.DeleteUserInfoByIdsRequest) (*userv1.DeleteUserInfoByIdsResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteUserInfoByIds", arg0, arg1)
	ret0, _ := ret[0].(*userv1.DeleteUserInfoByIdsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteUserInfoByIds indicates an expected call of DeleteUserInfoByIds.
func (mr *MockUserServiceServerMockRecorder) DeleteUserInfoByIds(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteUserInfoByIds", reflect.TypeOf((*MockUserServiceServer)(nil).DeleteUserInfoByIds), arg0, arg1)
}

// GetUserInfoById mocks base method.
func (m *MockUserServiceServer) GetUserInfoById(arg0 context.Context, arg1 *userv1.GetUserInfoByIdRequest) (*userv1.GetUserInfoByIdResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserInfoById", arg0, arg1)
	ret0, _ := ret[0].(*userv1.GetUserInfoByIdResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserInfoById indicates an expected call of GetUserInfoById.
func (mr *MockUserServiceServerMockRecorder) GetUserInfoById(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserInfoById", reflect.TypeOf((*MockUserServiceServer)(nil).GetUserInfoById), arg0, arg1)
}

// LoginByEmailAndPassword mocks base method.
func (m *MockUserServiceServer) LoginByEmailAndPassword(arg0 context.Context, arg1 *userv1.LoginByEmailAndPasswordRequest) (*userv1.LoginByEmailAndPasswordResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LoginByEmailAndPassword", arg0, arg1)
	ret0, _ := ret[0].(*userv1.LoginByEmailAndPasswordResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// LoginByEmailAndPassword indicates an expected call of LoginByEmailAndPassword.
func (mr *MockUserServiceServerMockRecorder) LoginByEmailAndPassword(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LoginByEmailAndPassword", reflect.TypeOf((*MockUserServiceServer)(nil).LoginByEmailAndPassword), arg0, arg1)
}

// LoginByPhoneCode mocks base method.
func (m *MockUserServiceServer) LoginByPhoneCode(arg0 context.Context, arg1 *userv1.LoginByPhoneCodeRequest) (*userv1.LoginByPhoneCodeResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LoginByPhoneCode", arg0, arg1)
	ret0, _ := ret[0].(*userv1.LoginByPhoneCodeResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// LoginByPhoneCode indicates an expected call of LoginByPhoneCode.
func (mr *MockUserServiceServerMockRecorder) LoginByPhoneCode(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LoginByPhoneCode", reflect.TypeOf((*MockUserServiceServer)(nil).LoginByPhoneCode), arg0, arg1)
}

// Logout mocks base method.
func (m *MockUserServiceServer) Logout(arg0 context.Context, arg1 *userv1.LogoutRequest) (*userv1.LogoutResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Logout", arg0, arg1)
	ret0, _ := ret[0].(*userv1.LogoutResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Logout indicates an expected call of Logout.
func (mr *MockUserServiceServerMockRecorder) Logout(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Logout", reflect.TypeOf((*MockUserServiceServer)(nil).Logout), arg0, arg1)
}

// RegisterByEmailAndPassword mocks base method.
func (m *MockUserServiceServer) RegisterByEmailAndPassword(arg0 context.Context, arg1 *userv1.RegisterByEmailAndPasswordRequest) (*userv1.RegisterByEmailAndPasswordResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RegisterByEmailAndPassword", arg0, arg1)
	ret0, _ := ret[0].(*userv1.RegisterByEmailAndPasswordResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RegisterByEmailAndPassword indicates an expected call of RegisterByEmailAndPassword.
func (mr *MockUserServiceServerMockRecorder) RegisterByEmailAndPassword(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RegisterByEmailAndPassword", reflect.TypeOf((*MockUserServiceServer)(nil).RegisterByEmailAndPassword), arg0, arg1)
}

// UpdateAvatar mocks base method.
func (m *MockUserServiceServer) UpdateAvatar(arg0 context.Context, arg1 *userv1.UpdateAvatarRequest) (*userv1.UpdateAvatarResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateAvatar", arg0, arg1)
	ret0, _ := ret[0].(*userv1.UpdateAvatarResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateAvatar indicates an expected call of UpdateAvatar.
func (mr *MockUserServiceServerMockRecorder) UpdateAvatar(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateAvatar", reflect.TypeOf((*MockUserServiceServer)(nil).UpdateAvatar), arg0, arg1)
}

// UpdateUserInfoById mocks base method.
func (m *MockUserServiceServer) UpdateUserInfoById(arg0 context.Context, arg1 *userv1.UpdateUserInfoByIdRequest) (*userv1.UpdateUserInfoByIdResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateUserInfoById", arg0, arg1)
	ret0, _ := ret[0].(*userv1.UpdateUserInfoByIdResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateUserInfoById indicates an expected call of UpdateUserInfoById.
func (mr *MockUserServiceServerMockRecorder) UpdateUserInfoById(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateUserInfoById", reflect.TypeOf((*MockUserServiceServer)(nil).UpdateUserInfoById), arg0, arg1)
}

// mustEmbedUnimplementedUserServiceServer mocks base method.
func (m *MockUserServiceServer) mustEmbedUnimplementedUserServiceServer() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "mustEmbedUnimplementedUserServiceServer")
}

// mustEmbedUnimplementedUserServiceServer indicates an expected call of mustEmbedUnimplementedUserServiceServer.
func (mr *MockUserServiceServerMockRecorder) mustEmbedUnimplementedUserServiceServer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "mustEmbedUnimplementedUserServiceServer", reflect.TypeOf((*MockUserServiceServer)(nil).mustEmbedUnimplementedUserServiceServer))
}

// MockUnsafeUserServiceServer is a mock of UnsafeUserServiceServer interface.
type MockUnsafeUserServiceServer struct {
	ctrl     *gomock.Controller
	recorder *MockUnsafeUserServiceServerMockRecorder
	isgomock struct{}
}

// MockUnsafeUserServiceServerMockRecorder is the mock recorder for MockUnsafeUserServiceServer.
type MockUnsafeUserServiceServerMockRecorder struct {
	mock *MockUnsafeUserServiceServer
}

// NewMockUnsafeUserServiceServer creates a new mock instance.
func NewMockUnsafeUserServiceServer(ctrl *gomock.Controller) *MockUnsafeUserServiceServer {
	mock := &MockUnsafeUserServiceServer{ctrl: ctrl}
	mock.recorder = &MockUnsafeUserServiceServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUnsafeUserServiceServer) EXPECT() *MockUnsafeUserServiceServerMockRecorder {
	return m.recorder
}

// mustEmbedUnimplementedUserServiceServer mocks base method.
func (m *MockUnsafeUserServiceServer) mustEmbedUnimplementedUserServiceServer() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "mustEmbedUnimplementedUserServiceServer")
}

// mustEmbedUnimplementedUserServiceServer indicates an expected call of mustEmbedUnimplementedUserServiceServer.
func (mr *MockUnsafeUserServiceServerMockRecorder) mustEmbedUnimplementedUserServiceServer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "mustEmbedUnimplementedUserServiceServer", reflect.TypeOf((*MockUnsafeUserServiceServer)(nil).mustEmbedUnimplementedUserServiceServer))
}
