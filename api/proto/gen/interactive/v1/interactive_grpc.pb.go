// 版本号

// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             (unknown)
// source: api/proto/interactive/v1/interactive.proto

// 包名

package interactivev1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	InteractiveService_Like_FullMethodName            = "/interactive.v1.interactiveService/Like"
	InteractiveService_UnLike_FullMethodName          = "/interactive.v1.interactiveService/UnLike"
	InteractiveService_Collect_FullMethodName         = "/interactive.v1.interactiveService/Collect"
	InteractiveService_UnCollect_FullMethodName       = "/interactive.v1.interactiveService/UnCollect"
	InteractiveService_InteractiveInfo_FullMethodName = "/interactive.v1.interactiveService/InteractiveInfo"
	InteractiveService_IncreaseRead_FullMethodName    = "/interactive.v1.interactiveService/IncreaseRead"
	InteractiveService_InsertFollow_FullMethodName    = "/interactive.v1.interactiveService/InsertFollow"
	InteractiveService_CancelFollow_FullMethodName    = "/interactive.v1.interactiveService/CancelFollow"
	InteractiveService_FollowList_FullMethodName      = "/interactive.v1.interactiveService/FollowList"
	InteractiveService_FanList_FullMethodName         = "/interactive.v1.interactiveService/FanList"
	InteractiveService_BothFollowList_FullMethodName  = "/interactive.v1.interactiveService/BothFollowList"
)

// InteractiveServiceClient is the client API for InteractiveService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// interactiveService 互动服务
type InteractiveServiceClient interface {
	Like(ctx context.Context, in *LikeRequest, opts ...grpc.CallOption) (*LikeResponse, error)
	UnLike(ctx context.Context, in *UnLikeRequest, opts ...grpc.CallOption) (*UnLikeResponse, error)
	Collect(ctx context.Context, in *CollectRequest, opts ...grpc.CallOption) (*CollectResponse, error)
	UnCollect(ctx context.Context, in *UnCollectRequest, opts ...grpc.CallOption) (*UnCollectResponse, error)
	InteractiveInfo(ctx context.Context, in *InteractiveInfoRequest, opts ...grpc.CallOption) (*InteractiveInfoResponse, error)
	IncreaseRead(ctx context.Context, in *IncreaseReadRequest, opts ...grpc.CallOption) (*IncreaseReadResponse, error)
	InsertFollow(ctx context.Context, in *InsertFollowRequest, opts ...grpc.CallOption) (*InsertFollowResponse, error)
	CancelFollow(ctx context.Context, in *CancelFollowRequest, opts ...grpc.CallOption) (*CancelFollowResponse, error)
	FollowList(ctx context.Context, in *FollowListRequest, opts ...grpc.CallOption) (*FollowListResponse, error)
	FanList(ctx context.Context, in *FanListRequest, opts ...grpc.CallOption) (*FanListResponse, error)
	BothFollowList(ctx context.Context, in *BothFollowListRequest, opts ...grpc.CallOption) (*BothFollowListResponse, error)
}

type interactiveServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewInteractiveServiceClient(cc grpc.ClientConnInterface) InteractiveServiceClient {
	return &interactiveServiceClient{cc}
}

func (c *interactiveServiceClient) Like(ctx context.Context, in *LikeRequest, opts ...grpc.CallOption) (*LikeResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(LikeResponse)
	err := c.cc.Invoke(ctx, InteractiveService_Like_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *interactiveServiceClient) UnLike(ctx context.Context, in *UnLikeRequest, opts ...grpc.CallOption) (*UnLikeResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UnLikeResponse)
	err := c.cc.Invoke(ctx, InteractiveService_UnLike_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *interactiveServiceClient) Collect(ctx context.Context, in *CollectRequest, opts ...grpc.CallOption) (*CollectResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CollectResponse)
	err := c.cc.Invoke(ctx, InteractiveService_Collect_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *interactiveServiceClient) UnCollect(ctx context.Context, in *UnCollectRequest, opts ...grpc.CallOption) (*UnCollectResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UnCollectResponse)
	err := c.cc.Invoke(ctx, InteractiveService_UnCollect_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *interactiveServiceClient) InteractiveInfo(ctx context.Context, in *InteractiveInfoRequest, opts ...grpc.CallOption) (*InteractiveInfoResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(InteractiveInfoResponse)
	err := c.cc.Invoke(ctx, InteractiveService_InteractiveInfo_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *interactiveServiceClient) IncreaseRead(ctx context.Context, in *IncreaseReadRequest, opts ...grpc.CallOption) (*IncreaseReadResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IncreaseReadResponse)
	err := c.cc.Invoke(ctx, InteractiveService_IncreaseRead_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *interactiveServiceClient) InsertFollow(ctx context.Context, in *InsertFollowRequest, opts ...grpc.CallOption) (*InsertFollowResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(InsertFollowResponse)
	err := c.cc.Invoke(ctx, InteractiveService_InsertFollow_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *interactiveServiceClient) CancelFollow(ctx context.Context, in *CancelFollowRequest, opts ...grpc.CallOption) (*CancelFollowResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CancelFollowResponse)
	err := c.cc.Invoke(ctx, InteractiveService_CancelFollow_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *interactiveServiceClient) FollowList(ctx context.Context, in *FollowListRequest, opts ...grpc.CallOption) (*FollowListResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(FollowListResponse)
	err := c.cc.Invoke(ctx, InteractiveService_FollowList_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *interactiveServiceClient) FanList(ctx context.Context, in *FanListRequest, opts ...grpc.CallOption) (*FanListResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(FanListResponse)
	err := c.cc.Invoke(ctx, InteractiveService_FanList_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *interactiveServiceClient) BothFollowList(ctx context.Context, in *BothFollowListRequest, opts ...grpc.CallOption) (*BothFollowListResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(BothFollowListResponse)
	err := c.cc.Invoke(ctx, InteractiveService_BothFollowList_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// InteractiveServiceServer is the server API for InteractiveService service.
// All implementations must embed UnimplementedInteractiveServiceServer
// for forward compatibility.
//
// interactiveService 互动服务
type InteractiveServiceServer interface {
	Like(context.Context, *LikeRequest) (*LikeResponse, error)
	UnLike(context.Context, *UnLikeRequest) (*UnLikeResponse, error)
	Collect(context.Context, *CollectRequest) (*CollectResponse, error)
	UnCollect(context.Context, *UnCollectRequest) (*UnCollectResponse, error)
	InteractiveInfo(context.Context, *InteractiveInfoRequest) (*InteractiveInfoResponse, error)
	IncreaseRead(context.Context, *IncreaseReadRequest) (*IncreaseReadResponse, error)
	InsertFollow(context.Context, *InsertFollowRequest) (*InsertFollowResponse, error)
	CancelFollow(context.Context, *CancelFollowRequest) (*CancelFollowResponse, error)
	FollowList(context.Context, *FollowListRequest) (*FollowListResponse, error)
	FanList(context.Context, *FanListRequest) (*FanListResponse, error)
	BothFollowList(context.Context, *BothFollowListRequest) (*BothFollowListResponse, error)
	mustEmbedUnimplementedInteractiveServiceServer()
}

// UnimplementedInteractiveServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedInteractiveServiceServer struct{}

func (UnimplementedInteractiveServiceServer) Like(context.Context, *LikeRequest) (*LikeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Like not implemented")
}
func (UnimplementedInteractiveServiceServer) UnLike(context.Context, *UnLikeRequest) (*UnLikeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UnLike not implemented")
}
func (UnimplementedInteractiveServiceServer) Collect(context.Context, *CollectRequest) (*CollectResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Collect not implemented")
}
func (UnimplementedInteractiveServiceServer) UnCollect(context.Context, *UnCollectRequest) (*UnCollectResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UnCollect not implemented")
}
func (UnimplementedInteractiveServiceServer) InteractiveInfo(context.Context, *InteractiveInfoRequest) (*InteractiveInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InteractiveInfo not implemented")
}
func (UnimplementedInteractiveServiceServer) IncreaseRead(context.Context, *IncreaseReadRequest) (*IncreaseReadResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method IncreaseRead not implemented")
}
func (UnimplementedInteractiveServiceServer) InsertFollow(context.Context, *InsertFollowRequest) (*InsertFollowResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InsertFollow not implemented")
}
func (UnimplementedInteractiveServiceServer) CancelFollow(context.Context, *CancelFollowRequest) (*CancelFollowResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CancelFollow not implemented")
}
func (UnimplementedInteractiveServiceServer) FollowList(context.Context, *FollowListRequest) (*FollowListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FollowList not implemented")
}
func (UnimplementedInteractiveServiceServer) FanList(context.Context, *FanListRequest) (*FanListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FanList not implemented")
}
func (UnimplementedInteractiveServiceServer) BothFollowList(context.Context, *BothFollowListRequest) (*BothFollowListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BothFollowList not implemented")
}
func (UnimplementedInteractiveServiceServer) mustEmbedUnimplementedInteractiveServiceServer() {}
func (UnimplementedInteractiveServiceServer) testEmbeddedByValue()                            {}

// UnsafeInteractiveServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to InteractiveServiceServer will
// result in compilation errors.
type UnsafeInteractiveServiceServer interface {
	mustEmbedUnimplementedInteractiveServiceServer()
}

func RegisterInteractiveServiceServer(s grpc.ServiceRegistrar, srv InteractiveServiceServer) {
	// If the following call pancis, it indicates UnimplementedInteractiveServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&InteractiveService_ServiceDesc, srv)
}

func _InteractiveService_Like_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LikeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InteractiveServiceServer).Like(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: InteractiveService_Like_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InteractiveServiceServer).Like(ctx, req.(*LikeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _InteractiveService_UnLike_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UnLikeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InteractiveServiceServer).UnLike(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: InteractiveService_UnLike_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InteractiveServiceServer).UnLike(ctx, req.(*UnLikeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _InteractiveService_Collect_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CollectRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InteractiveServiceServer).Collect(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: InteractiveService_Collect_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InteractiveServiceServer).Collect(ctx, req.(*CollectRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _InteractiveService_UnCollect_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UnCollectRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InteractiveServiceServer).UnCollect(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: InteractiveService_UnCollect_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InteractiveServiceServer).UnCollect(ctx, req.(*UnCollectRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _InteractiveService_InteractiveInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InteractiveInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InteractiveServiceServer).InteractiveInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: InteractiveService_InteractiveInfo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InteractiveServiceServer).InteractiveInfo(ctx, req.(*InteractiveInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _InteractiveService_IncreaseRead_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IncreaseReadRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InteractiveServiceServer).IncreaseRead(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: InteractiveService_IncreaseRead_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InteractiveServiceServer).IncreaseRead(ctx, req.(*IncreaseReadRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _InteractiveService_InsertFollow_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InsertFollowRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InteractiveServiceServer).InsertFollow(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: InteractiveService_InsertFollow_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InteractiveServiceServer).InsertFollow(ctx, req.(*InsertFollowRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _InteractiveService_CancelFollow_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CancelFollowRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InteractiveServiceServer).CancelFollow(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: InteractiveService_CancelFollow_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InteractiveServiceServer).CancelFollow(ctx, req.(*CancelFollowRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _InteractiveService_FollowList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FollowListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InteractiveServiceServer).FollowList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: InteractiveService_FollowList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InteractiveServiceServer).FollowList(ctx, req.(*FollowListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _InteractiveService_FanList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FanListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InteractiveServiceServer).FanList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: InteractiveService_FanList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InteractiveServiceServer).FanList(ctx, req.(*FanListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _InteractiveService_BothFollowList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BothFollowListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InteractiveServiceServer).BothFollowList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: InteractiveService_BothFollowList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InteractiveServiceServer).BothFollowList(ctx, req.(*BothFollowListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// InteractiveService_ServiceDesc is the grpc.ServiceDesc for InteractiveService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var InteractiveService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "interactive.v1.interactiveService",
	HandlerType: (*InteractiveServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Like",
			Handler:    _InteractiveService_Like_Handler,
		},
		{
			MethodName: "UnLike",
			Handler:    _InteractiveService_UnLike_Handler,
		},
		{
			MethodName: "Collect",
			Handler:    _InteractiveService_Collect_Handler,
		},
		{
			MethodName: "UnCollect",
			Handler:    _InteractiveService_UnCollect_Handler,
		},
		{
			MethodName: "InteractiveInfo",
			Handler:    _InteractiveService_InteractiveInfo_Handler,
		},
		{
			MethodName: "IncreaseRead",
			Handler:    _InteractiveService_IncreaseRead_Handler,
		},
		{
			MethodName: "InsertFollow",
			Handler:    _InteractiveService_InsertFollow_Handler,
		},
		{
			MethodName: "CancelFollow",
			Handler:    _InteractiveService_CancelFollow_Handler,
		},
		{
			MethodName: "FollowList",
			Handler:    _InteractiveService_FollowList_Handler,
		},
		{
			MethodName: "FanList",
			Handler:    _InteractiveService_FanList_Handler,
		},
		{
			MethodName: "BothFollowList",
			Handler:    _InteractiveService_BothFollowList_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/proto/interactive/v1/interactive.proto",
}
