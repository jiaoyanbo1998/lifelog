# 定义服务配置
services:
  # kafka服务的配置
  kafka:
    # 使用的Kafka镜像
    image: 'bitnami/kafka:3.6.0'
    # 映射端口，将容器的9092和9094端口映射到主机的相同端口
    ports:
      - '9092:9092'
      - '9094:9094'
    environment:
      # Kafka节点id为0
      - KAFKA_CFG_NODE_ID=0
      # 创建一个名为LifeLog_binlog的topic，分为3个分区，每个分区1个副本
      - KAFKA_CREATE_TOPICS=LifeLog_binlog:3:1
      # 开启自动创建topic功能，注意：生产环境中建议关闭此功能，过多的topic数量会导致Kafka的性能下降
      - KAFKA_CFG_AUTO_CREATE_TOPICS_ENABLE=true
      # Kafka的broker实例，不仅可以作为普通的服务器，还可以作为Kafka的控制器
      - KAFKA_CFG_PROCESS_ROLES=controller,broker
      # 定义Kafka监听器，包括PLAINTEXT、CONTROLLER和EXTERNAL三种类型
      - KAFKA_CFG_LISTENERS=PLAINTEXT://0.0.0.0:9092,CONTROLLER://:9093,EXTERNAL://0.0.0.0:9094
      # 对外宣传的监听器地址，用于客户端连接
      - KAFKA_CFG_ADVERTISED_LISTENERS=PLAINTEXT://localhost:9092,EXTERNAL://localhost:9094
      # 定义监听器的安全协议映射
      - KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP=CONTROLLER:PLAINTEXT,EXTERNAL:PLAINTEXT,PLAINTEXT:PLAINTEXT
      # 配置Kafka控制器选票信息
      - KAFKA_CFG_CONTROLLER_QUORUM_VOTERS=0@kafka:9093
      # 指定Kafka控制器监听器名称
      - KAFKA_CFG_CONTROLLER_LISTENER_NAMES=CONTROLLER

  # prometheus服务的配置
  prometheus:
    image: prom/prometheus:v2.47.2
    volumes:
      # 将本地的prometheus.yml文件挂载到容器中
      - ./prometheus.yaml:/etc/prometheus/prometheus.yml
    command:
      - "--web.enable-remote-write-receiver"
      - "--config.file=/etc/prometheus/prometheus.yml"
    ports:
      # 访问数据的端口
      - 9090:9090

  # grafana服务的配置
  grafana:
    image: grafana/grafana:latest # grafana/grafana-enterprise:10.2.0
    ports:
      - 3000:3000

  # zipkin服务的配置
  zipkin:
    image: openzipkin/zipkin
    ports:
        - 9411:9411

  # etcd服务的配置
  etcd:
    # 使用的etcd镜像
    image: bitnami/etcd:latest
    environment:
      # 允许匿名访问
      - ALLOW_NONE_AUTHENTICATION=yes
    ports:
      - 12379:2379 # 使用2379端口来连接etcd

  minio:
    container_name: minio
    image: bitnami/minio:2024
    ports:
      - "9000:9000"
      - "9001:9001"
    environment:
      - MINIO_ROOT_USER=123456
      - MINIO_ROOT_PASSWORD=root123456
    volumes:
      - ./config/minio/data:/data


  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:7.13.0
    container_name: elasticsearch
    environment:
      - discovery.type=single-node
      - "xpack.security.enabled=false"
      - "ES_JAVA_OPTS=-Xms84m -Xmx512m"
    ports:
      - "9200:9200"


  logstash:
    image: docker.elastic.co/logstash/logstash:7.13.0
    volumes:
      - ./config/logstash:/usr/share/logstash/pipeline
    environment:
      - "xpack.monitoring.elasticsearch.hosts=http://elasticsearch:9200"
    ports:
      - 5044:5044


  kibana:
    image: docker.elastic.co/kibana/kibana:7.13.0
    environment:
      - ELASTICSEARCH_HOSTS=http://elasticsearch:9200
      - i18n.locale=zh-CN
    ports:
      - "5601:5601"