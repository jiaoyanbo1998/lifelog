// Code generated by Wire. DO NOT EDIT.

//go:generate go run -mod=mod github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package main

import (
	"github.com/google/wire"
	"lifelog-grpc/comment/event/sarama-kafka"
	"lifelog-grpc/comment/grpc"
	"lifelog-grpc/comment/ioc"
	"lifelog-grpc/comment/repository"
	"lifelog-grpc/comment/repository/dao"
	"lifelog-grpc/comment/service"
)

// Injectors from wire.go:

func InitCommentServiceGRPCService() *App {
	logger := ioc.InitLogger()
	db := ioc.GetMysql(logger)
	commentDao := dao.NewCommentDaoGorm(db, logger)
	commentRepository := repository.NewCommentRepository(commentDao)
	commentService := service.NewCommentService(commentRepository)
	client := ioc.InitSaramaKafka(logger)
	syncProducer := ioc.InitSaramaSyncProducer(client)
	saramaKafkaSyncProducer := saramaKafka.NewSyncProducer(syncProducer, logger)
	commentServiceGRPCService := grpc.NewCommentServiceGRPCService(commentService, saramaKafkaSyncProducer, logger)
	asyncCommentEventConsumer := saramaKafka.NewAsyncCommentEventConsumer(client, logger, commentService)
	app := &App{
		commentServiceGRPCService: commentServiceGRPCService,
		commentConsumer:           asyncCommentEventConsumer,
	}
	return app
}

// wire.go:

var commentSet = wire.NewSet(service.NewCommentService, repository.NewCommentRepository, dao.NewCommentDaoGorm)

var thirdSet = wire.NewSet(ioc.InitLogger, ioc.GetMysql)

var kafkaSet = wire.NewSet(ioc.InitSaramaKafka, saramaKafka.NewSyncProducer, saramaKafka.NewAsyncCommentEventConsumer, saramaKafka.NewAsyncProducer, saramaKafka.NewAsyncBatchCommentEventConsumer, ioc.InitSaramaSyncProducer)
